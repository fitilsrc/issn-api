version: '3.9'
services:
  postgres:
    image: postgres:latest
    labels:
       postgres.label: "postgres"
    logging:
       driver: json-file
       options:
         labels: postgres.label
    container_name: postgres
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - ./.docker/postgres_issn_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${APP_POSTGRES_DB}
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD: ${APP_POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${APP_POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - issn-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    labels:
       keycloak.label: "keycloak"
    logging:
       driver: json-file
       options:
         labels: keycloak.label
    container_name: keycloak
    hostname: keycloak
    command: start-dev --http-relative-path /auth
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${APP_POSTGRES_DB}
      KC_DB_SCHEMA: public
      KC_DB_USERNAME: ${APP_POSTGRES_USER}
      KC_DB_PASSWORD: ${APP_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      PROXY_ADDRESS_FORWARDING: "true"
      KC_PROXY: edge
    ports:
      - 127.0.0.1:8080:8080
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - issn-network

  rabbitmq:
    image: rabbitmq:3-management
    labels:
       rabbitmq.label: "rabbitmq"
    logging:
       driver: json-file
       options:
         labels: rabbitmq.label
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ./.docker/rabbitmq:/var/lib/rabbitmq
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - issn-network

  auth:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth
    labels:
       auth.label: "auth"
    logging:
       driver: json-file
       options:
         labels: auth.label
    env_file:
      - .env
    depends_on:
      - keycloak
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev auth
    restart: unless-stopped
    networks:
      - issn-network

  presence:
    build:
      context: ./
      dockerfile: ./apps/presence/Dockerfile
    container_name: presence
    labels:
       presence.label: "presence"
    logging:
       driver: json-file
       options:
         labels: presence.label
    env_file:
      - .env
    depends_on:
      - postgres
      - keycloak
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev presence
    restart: unless-stopped
    networks:
      - issn-network

  persons:
    build:
      context: ./
      dockerfile: ./apps/persons/Dockerfile
    container_name: persons
    labels:
       persons.label: "persons"
    logging:
       driver: json-file
       options:
         labels: persons.label
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev persons
    restart: unless-stopped
    networks:
      - issn-network

  api:
    build:
      context: ./
      dockerfile: ./apps/issn-api/Dockerfile
    container_name: api
    labels:
       api.label: "api"
    logging:
       driver: json-file
       options:
         labels: api.label
    ports:
      - 127.0.0.1:9000:9000
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - postgres
      - keycloak
      - auth
      - presence
      - persons
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev api
    restart: on-failure
    networks:
      - issn-network

  minio:
    image: minio/minio:latest
    labels:
       minio.label: "minio"
    logging:
       driver: json-file
       options:
         labels: minio.label
    command: server --console-address ":9001" /data
    container_name: minio
    ports:
      - 127.0.0.1:9900:9900
      - 127.0.0.1:9901:9001
    volumes:
      - ${MINIO_DATA_ROOT_DIR}:/data
    environment:
      MINIO_ROOT_USER: issn_admin
      MINIO_ROOT_PASSWORD: 123456789
      MINIO_ADDRESS: ':9900'
      MINIO_DEFAULT_BUCKETS: images
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
     interval: 30s
     timeout: 20s
     retries: 3
    networks:
      - issn-network

  files:
     build:
     context: ./
     dockerfile: ./apps/files/Dockerfile
     container_name: files
    labels:
       files.label: "files"
    logging:
       driver: json-file
       options:
         labels: files.label
     env_file:
       - .env
     depends_on:
       - minio
       - rabbitmq
     volumes:
       - .:/usr/src/app
       - /usr/src/app/node_modules
     command: yarn start:dev files
     restart: unless-stopped
     networks:
       - issn-network

volumes:
  postgres_issn_data:
    driver: local
  rabbitmq:

networks:
  issn-network:
    external: true
    driver: bridge
